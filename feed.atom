<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://null.computer</id>
    <title>null.computer</title>
    <updated>2017-01-02T08:14:05Z</updated>
    <author>
        <name>CJ R.</name>
        <email>hello@cjr.co.de</email>
        <uri>https://github.com/w3cj</uri>
    </author>
    <link rel="alternate" href="http://null.computer"/>
    <subtitle>A web log by w3cj</subtitle>
    <generator>Feed for Node.js</generator>
    <entry>
        <title type="html"><![CDATA[Why build from scratch?]]></title>
        <id>http://null.computer#posts/05-why-build-from-scratch.md</id>
        <link href="http://null.computer#posts/05-why-build-from-scratch.md">
        </link>
        <updated>2017-01-02T08:14:05Z</updated>
        <summary type="html"><![CDATA[<h2 id="why-build-from-scratch-">Why build from scratch?</h2>
<p>I&#39;ve been creating this blog and writing these posts and you might be wondering... why? There are plenty of existing blogging solutions out there. Why re-invent the wheel?</p>
<p>In a way, null.computer is a meta project to keep me coding and growing. I&#39;ve had blogs in the past, but never stayed motivated enough to keep them updated.</p>
<h4 id="this-blog-is-an-exploration-in-computers-coding-and-all-things-possible-therein-">This blog is an exploration in computers, coding and all things possible therein.</h4>
<h3 id="-icecream-exhibit-a-vanilla-js">:icecream: Exhibit A: Vanilla JS</h3>
<p>Checkout the source for this page.</p>
<p>Go ahead, I&#39;ll wait. (CTRL+U or CMD+U in Chrome).</p>
<p>You may notice that there is only 1 external library linked. Aside from the <a href="https://github.com/github/fetch">fetch polyfil</a>, everything else is 100% Fair Trade Certified Organic Grade A Hand Crafted DIY Vanilla JavaScript.</p>
<p>I&#39;ve been challenging myself lately to minimize library usage and stay as vanilla as possible, combined with my desire to keep learning and growing, this blog is an extension of that.</p>
<h3 id="-tada-exhibit-b-js-is-fun">:tada: Exhibit B: JS is fun</h3>
<p>Promises, arrow functions, template literals, array methods (map, filter, reduce), Browser APIs (Service Workers, fetch, etc.) and everything else JavaScript all make coding in JavaScript really fun even without using the latest library/framework.</p>
<p>The JS code for this site is 100% supported in Chrome without any need for transpiling. I&#39;ll probably add transpiling soon (damn you older browsers!), but this just speaks to the awesomeness that JS has become.</p>
<p>I&#39;ll will also definitely eventually blog about various interesting libraries and frameworks, but if it can be done in a few lines with Vanilla JS I&#39;ll make the effort to do so.</p>
<h3 id="-1234-exhibit-c-new-posts-days-ever">:1234: Exhibit C: # new posts/# days &gt; ever</h3>
<p>I&#39;ve made more posts in the past 3 days than ever before in my blogging history.</p>
<h2 id="final-thoughts">Final Thoughts</h2>
<p>As long as there are things I want to add to this blog (SSL, comments, searching, SEO etc. etc.) I&#39;ll keep on coding and web logging.</p>
<p>Thanks for reading this far down. Stay tuned for more. :vulcan_salute:</p>
]]></summary>
        <author>
            <name>CJ R.</name>
            <email>hello@cjr.co.de</email>
            <uri>https://github.com/w3cj</uri>
        </author>
        <published>2017-01-02T08:14:05Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[RSS/Atom Feed Generator]]></title>
        <id>http://null.computer#posts/04-feed-generator.md</id>
        <link href="http://null.computer#posts/04-feed-generator.md">
        </link>
        <updated>2017-01-02T03:01:25Z</updated>
        <summary type="html"><![CDATA[<h2 id="rss-atom-feed-generator">RSS/Atom Feed Generator</h2>
<p>The fantastic <a href="https://github.com/dannyfritz">Mr. Fritz</a> (aka Danny) <a href="https://github.com/w3cj/null.computer/issues/1">pointed out</a> that every great blog has a consumable feed. Well Mr. Fritz, this one is for you!</p>
<p>null.computer now proudly broadcasts updates to the world!</p>
<p>Feeds are available as <a href="http://null.computer/feed.rss">RSS 2.0</a> and <a href="http://null.computer/feed.atom">Atom 1.0</a></p>
<h3 id="how-you-do-that-">How you do that?</h3>
<p>For my first attempt at this, I re-used my existing github API code to retrieve rendered posts and commit history. I soon ran into the dreaded <code>Github API Rate limit exceeded</code> message and decided an entirely local approach was the way to go.</p>
<p>I used a few awesome modules from npm to accomplish this.</p>
<p><a href="https://www.npmjs.com/package/marked"><code>marked</code></a> was used to generate the markdown for each post.</p>
<p>To get the created/updated dates for each post, I explored using an <a href="https://www.npmjs.com/search?q=git%20log%20parse">npm module for git logs</a>, but ultimately could not find one that would allow me to get the logs for a single file. I ended up using <a href="https://nodejs.org/api/child_process.html#child_process_child_process_exec_command_options_callback"><code>child_process.exec</code></a> with <code>git log --follow &lt;path&gt;</code> to get the created/updated dates (commit history) for each post.</p>
<pre><code class="lang-js">const {exec} = require(&#39;child_process&#39;);

function getCommits(path) {
  return new Promise((resolve, reject) =&gt; {
    exec(`git log --follow ${path}`, (err, stdout, stderr) =&gt; {
      let created = new Date();
      let updated = new Date();

      if(!err &amp;&amp; stdout) {
        const commits = stdout.match(/Date:(.*)/g);
        if(commits.length &gt; 0) {
          created = new Date(commits[commits.length - 1].split(&#39;Date:&#39;)[1]);
          updated = new Date(commits[0].split(&#39;Date:&#39;)[1]);
        }
      } else {
        console.log(&#39;no commit history found&#39;, path);
      }

      resolve({
        created,
        updated
      });
    });
  });
}
</code></pre>
<p>Lastly, I used <a href="https://www.npmjs.com/package/feed"><code>feed</code></a> to generate the RSS 2.0 and Atom 1.0 feeds.</p>
<p><a href="https://www.npmjs.com/package/feed"><code>feed</code></a> has a simple API:</p>
<pre><code class="lang-js">const Feed = require(&#39;feed&#39;);

const author = {
  name: &#39;CJ R.&#39;,
  email: &#39;hello@cjr.co.de&#39;,
  link: &#39;https://github.com/w3cj&#39;
};

const feedURL = &#39;http://null.computer&#39;;

const feed = new Feed({
  title: &#39;null.computer&#39;,
  description: &#39;A web log by w3cj&#39;,
  id: feedURL,
  link: feedURL,
  author
});

feed.addItem({
  title: &#39;Hello Friend&#39;,
  id: `${feedURL}#posts/01-hello-friend.md`,
  link: `${feedURL}#posts/01-hello-friend.md`,
  description: &#39;&lt;h2&gt;Hello Friend&lt;/h2&gt;&#39;,
  author: [author],
  published: new Date(),
  date: new Date()
});

const xml = feed.render(&#39;atom-1.0&#39;);
console.log(xml);
</code></pre>
<p>The full code to generate the feeds can be found <a href="https://github.com/w3cj/null.computer/blob/master/tasks/feed.js">here</a>.</p>
<p>The only downside to all of this, is that I&#39;ll need to re-generate the feed each time I write a new post. Maybe I&#39;ll add a pre-commit task? This is slowly turning into a static site generator...</p>
]]></summary>
        <author>
            <name>CJ R.</name>
            <email>hello@cjr.co.de</email>
            <uri>https://github.com/w3cj</uri>
        </author>
        <published>2017-01-02T02:46:09Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[Using the Github Commits API for Post Metadata]]></title>
        <id>http://null.computer#posts/03-post-commits-api.md</id>
        <link href="http://null.computer#posts/03-post-commits-api.md">
        </link>
        <updated>2017-01-01T16:48:58Z</updated>
        <summary type="html"><![CDATA[<h2 id="using-the-github-commits-api-for-post-metadata">Using the Github Commits API for Post Metadata</h2>
<p>I wanted to add a dynamic <code>created</code> and <code>updated</code> date to the posts for this blog. For this I found the <a href="https://developer.github.com/v3/repos/commits/">commits API endpoint</a>.</p>
<p>Using this endpoint, I was able to get all of the commits for each post and determine a created and updated date.</p>
<pre><code class="lang-js">const created = commits[commits.length - 1].commit.author.date;
const updated = commits[0].commit.author.date;
</code></pre>
<p>My JS template literals are starting to look a lot like jsx...</p>
<pre><code class="lang-js">`
&lt;small&gt;&lt;strong&gt;Path:&lt;/strong&gt; ${post.path}&lt;/small&gt;&lt;br&gt;
&lt;small&gt;&lt;strong&gt;Logged:&lt;/strong&gt; ${post.commits.created}&lt;/small&gt;
${ post.commits.updated == post.commits.created ? &#39;&#39; :
    `&lt;br&gt;&lt;small&gt;&lt;strong&gt;Updated:&lt;/strong&gt; ${post.commits.updated}&lt;/small&gt;` }
`
</code></pre>
<p>I also did a little refactoring and will potentially move the blog code into an npm module. For now, this site now comprises of 2 JS files instead of 1! ðŸ¤“</p>
]]></summary>
        <author>
            <name>CJ R.</name>
            <email>hello@cjr.co.de</email>
            <uri>https://github.com/w3cj</uri>
        </author>
        <published>2016-12-31T19:56:50Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[Github API Based Static Blog]]></title>
        <id>http://null.computer#posts/02-github-api-blog.md</id>
        <link href="http://null.computer#posts/02-github-api-blog.md">
        </link>
        <updated>2016-12-31T19:56:50Z</updated>
        <summary type="html"><![CDATA[<h2 id="github-api-based-static-blog">Github API Based Static Blog</h2>
<p>Instead of using a static site generator to create a blog hosted on github-pages, I thought it would be an interesting challenge to create a static blog using only the <a href="https://developer.github.com/v3/">github API</a>.</p>
<p>The github API offers up a few endpoints of interest:</p>
<ul>
<li><a href="https://developer.github.com/v3/repos/contents/">Repo Contents</a></li>
<li><a href="https://developer.github.com/v3/media/">Media Types</a></li>
</ul>
<h3 id="basic-idea">Basic Idea</h3>
<p>Store blog <a href="https://github.com/w3cj/null.computer/tree/master/posts">posts in markdown files in a git repo</a>. Then use the github repo contents API to dynamically retrieve and render those markdown files.</p>
<h3 id="easy-enough">Easy Enough</h3>
<p>It actually didn&#39;t take too much code for a basic proof of concept with post caching in localStorage!</p>
<p>This is the code making this page work (as of December 31st 2016 10:39 AM):</p>
<pre><code class="lang-js">const API_URL = &#39;https://api.github.com&#39;;
const REPO_URL = `${API_URL}/repos/w3cj/null.computer/contents/posts`;

fetch(REPO_URL)
  .then(result =&gt; result.json())
  .then(infos =&gt; Promise.all(infos.reverse().map(loadPost)))
  .then(posts =&gt; posts
                  .reduce((html, post) =&gt;
                  `${html}&lt;section&gt;${post}&lt;/section&gt;&lt;hr&gt;`,
                  &#39;&lt;hr&gt;&#39;))
  .then(html =&gt; document.querySelector(&#39;#posts&#39;).innerHTML = html);

function loadPost(info) {
  const loadedSha = localStorage[`${info.path}-sha`];
  if(loadedSha &amp;&amp; loadedSha == info.sha) {
    const loadedHTML = localStorage[`${info.path}-html`];
    return Promise.resolve(loadedHTML);
  } else {
    return fetch(info.url, {
        headers: {
          accept: &#39;application/vnd.github.v3.html+json&#39;
        }
      }).then(result =&gt; result.text())
      .then(html =&gt; {
        localStorage[`${info.path}-sha`] = info.sha;
        localStorage[`${info.path}-html`] = html;
        return html;
      });
  }
}
</code></pre>
<h3 id="future-plans">Future Plans</h3>
<p>Right now, all files in the <a href="https://github.com/w3cj/null.computer/tree/master/posts"><code>posts</code> folder of this repo</a> will be added to this page. As this blog grows, this will not scale. Eventually I would like to add SPA style single page posts and lazy loading.</p>
<p>The posts are simple markdown files right now. In the future, I could incorporate metadata at the top of a file to add title, date, tags etc.</p>
]]></summary>
        <author>
            <name>CJ R.</name>
            <email>hello@cjr.co.de</email>
            <uri>https://github.com/w3cj</uri>
        </author>
        <published>2016-12-31T14:20:40Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Friend]]></title>
        <id>http://null.computer#posts/01-hello-friend.md</id>
        <link href="http://null.computer#posts/01-hello-friend.md">
        </link>
        <updated>2016-12-31T19:56:50Z</updated>
        <summary type="html"><![CDATA[<h2 id="hello-friend">Hello Friend</h2>
<p>I will log things here.</p>
<pre><code class="lang-js">function helloFriend() {
  console.log(&#39;null.computer&#39;);
}
</code></pre>
]]></summary>
        <author>
            <name>CJ R.</name>
            <email>hello@cjr.co.de</email>
            <uri>https://github.com/w3cj</uri>
        </author>
        <published>2016-12-31T13:35:52Z</published>
    </entry>
</feed>